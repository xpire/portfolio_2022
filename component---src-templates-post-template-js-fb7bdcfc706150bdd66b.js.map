{"version":3,"file":"component---src-templates-post-template-js-fb7bdcfc706150bdd66b.js","mappings":"uPAoBMA,EAAkBC,EAAAA,EAAAA,IAAH,wDAIfC,GAAiBC,EAAAA,EAAAA,IAAUC,EAAAA,EAAVD,CAAH,uDAIdE,GAAmBF,EAAAA,EAAAA,IAAUG,EAAAA,GAAVH,CAAH,yDAyHtB,UArHqB,SAAC,GAAc,IAAZI,EAAW,EAAXA,MACtBC,EAAAA,EAAAA,KACA,MAAwDD,EAAKE,IAAIC,YAAzDC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,MAAOC,EAA5B,EAA4BA,KAAMC,EAAlC,EAAkCA,MAAOC,EAAzC,EAAyCA,KAAMC,EAA/C,EAA+CA,KACvCC,EAASX,EAAKE,IAAdS,KACFC,EAAMN,EAAMO,gBAAgBC,gBAElC,OADAC,QAAQC,IAAI,CAAET,KAAAA,EAAMC,MAAAA,EAAOC,KAAAA,EAAMC,KAAAA,IAE/B,gBAAC,KAAD,KACE,gBAAC,KAAD,KACE,gBAAC,IAAD,CAAYO,QAAQ,UAClB,4BAAOZ,IAET,gBAAC,IAAD,CAAYY,QAAQ,MAClB,4BACE,gBAAC,KAAD,mBAGJ,gBAAC,IAAD,CAAYA,QAAQ,KAAKC,cAAY,GAClCd,GAEH,gBAAC,KAAD,KACE,gBAAC,IAAD,CACEU,gBAAiBF,EACjBO,SAAUb,EAAMO,gBAAgBM,SAChCC,IAAQhB,EAAL,oBAGP,gBAACX,EAAD,KACE,gBAAC,KAAD,CAAM4B,WAAS,EAACC,QAAS,GACtBf,GACC,gBAAC,KAAD,CAAMgB,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGJ,WAAS,EAACK,UAAU,SAASJ,QAAS,GAC7D,gBAACxB,EAAD,CAAkByB,MAAI,GACpB,gBAAC,IAAD,CAAYN,QAAQ,YAApB,SAEF,gBAAC,KAAD,CAAMM,MAAI,GACR,gBAAC5B,EAAD,CAAgBsB,QAAQ,MAAMV,KAInCC,GACC,gBAAC,KAAD,CAAMe,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGJ,WAAS,EAACK,UAAU,SAASJ,QAAS,GAC7D,gBAACxB,EAAD,CAAkByB,MAAI,GACpB,gBAAC,IAAD,CAAYN,QAAQ,YAApB,UAEDT,EAAMmB,KAAI,SAACC,GAAD,OACT,gBAAC,KAAD,CAAML,MAAI,GACR,gBAAC5B,EAAD,CAAgBsB,QAAQ,MAAMW,QAKrCnB,GACC,gBAAC,KAAD,CAAMc,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGJ,WAAS,EAACK,UAAU,SAASJ,QAAS,GAC7D,gBAACxB,EAAD,CAAkByB,MAAI,GACpB,gBAAC,IAAD,CAAYN,QAAQ,YAApB,SAEF,gBAAC,KAAD,CAAMM,MAAI,GACR,gBAAC,KAAD,CAAcM,KAAMpB,EAAMQ,QAAQ,MAAlC,gBAMLP,GACC,gBAAC,KAAD,CAAMa,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGJ,WAAS,EAACK,UAAU,SAASJ,QAAS,GAC7D,gBAACxB,EAAD,CAAkByB,MAAI,GACpB,gBAAC,IAAD,CAAYN,QAAQ,YAApB,SAEF,gBAAC,KAAD,CAAMM,MAAI,GACR,gBAAC,KAAD,CAAcM,KAAMnB,EAAMO,QAAQ,MAAlC,iBAQV,gBAAC,IAAD,KACE,gBAAC,EAAAa,YAAD,CAAaC,WAAYC,EAAAA,GACvB,gBAAC,EAAAC,YAAD,KAActB","sources":["webpack://just.in.awe/./src/templates/post-template.js"],"sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport BlurHashImage from \"../components/style/BlurHashImage\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\nimport styled from \"@emotion/styled\"\nimport {\n  MDXThemeProvider,\n  MDXProviderComponents,\n} from \"../components/style/MDXComponents\"\nimport {\n  PageContainer,\n  Section,\n  CodePrefix,\n  ExternalLink,\n} from \"../components/style/PageStyle\"\nimport { Typography, Grid, styled as muiStyled } from \"@mui/material\"\nimport PropTypes from \"prop-types\"\nimport { defineCustomElements as deckDeckGoHighlightElement } from \"@deckdeckgo/highlight-code/dist/loader\"\n\nconst ProjectOverview = styled.div`\n  margin: var(--size-10) auto;\n`\n\nconst ProjectSubtext = muiStyled(Typography)`\ncolor: var(--color-grey-500);\n`\n\nconst ProjectTitleGrid = muiStyled(Grid)`\n  margin-bottom: var(--size-3);\n`\n\nconst PostTemplate = ({ data }) => {\n  deckDeckGoHighlightElement()\n  const { title, date, image, type, stack, code, live } = data.mdx.frontmatter\n  const { body } = data.mdx\n  const img = image.childImageSharp.gatsbyImageData\n  console.log({ type, stack, code, live })\n  return (\n    <PageContainer>\n      <Section>\n        <Typography variant=\"button\">\n          <span>{date}</span>\n        </Typography>\n        <Typography variant=\"h4\">\n          <code>\n            <CodePrefix>/project</CodePrefix>\n          </code>\n        </Typography>\n        <Typography variant=\"h2\" gutterBottom>\n          {title}\n        </Typography>\n        <Section>\n          <BlurHashImage\n            gatsbyImageData={img}\n            blurHash={image.childImageSharp.blurHash}\n            alt={`${title} project image`}\n          />\n        </Section>\n        <ProjectOverview>\n          <Grid container spacing={2}>\n            {type && (\n              <Grid item xs={6} sm={2} container direction=\"column\" spacing={1}>\n                <ProjectTitleGrid item>\n                  <Typography variant=\"overline\">Type</Typography>\n                </ProjectTitleGrid>\n                <Grid item>\n                  <ProjectSubtext variant=\"h6\">{type}</ProjectSubtext>\n                </Grid>\n              </Grid>\n            )}\n            {stack && (\n              <Grid item xs={6} sm={2} container direction=\"column\" spacing={1}>\n                <ProjectTitleGrid item>\n                  <Typography variant=\"overline\">Stack</Typography>\n                </ProjectTitleGrid>\n                {stack.map((s) => (\n                  <Grid item>\n                    <ProjectSubtext variant=\"h6\">{s}</ProjectSubtext>\n                  </Grid>\n                ))}\n              </Grid>\n            )}\n            {code && (\n              <Grid item xs={6} sm={2} container direction=\"column\" spacing={1}>\n                <ProjectTitleGrid item>\n                  <Typography variant=\"overline\">Code</Typography>\n                </ProjectTitleGrid>\n                <Grid item>\n                  <ExternalLink href={code} variant=\"h6\">\n                    Repository\n                  </ExternalLink>\n                </Grid>\n              </Grid>\n            )}\n            {live && (\n              <Grid item xs={6} sm={2} container direction=\"column\" spacing={1}>\n                <ProjectTitleGrid item>\n                  <Typography variant=\"overline\">Live</Typography>\n                </ProjectTitleGrid>\n                <Grid item>\n                  <ExternalLink href={live} variant=\"h6\">\n                    View Site\n                  </ExternalLink>\n                </Grid>\n              </Grid>\n            )}\n          </Grid>\n        </ProjectOverview>\n        <MDXThemeProvider>\n          <MDXProvider components={MDXProviderComponents}>\n            <MDXRenderer>{body}</MDXRenderer>\n          </MDXProvider>\n        </MDXThemeProvider>\n      </Section>\n    </PageContainer>\n  )\n}\n\nexport const query = graphql`\n  query getPost($slug: String!) {\n    mdx(slug: { eq: $slug }) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM Do, YYYY\")\n        type\n        stack\n        code\n        live\n        image {\n          childImageSharp {\n            gatsbyImageData(\n              layout: FULL_WIDTH\n              placeholder: NONE\n              aspectRatio: 1.777\n            )\n            blurHash(componentX: 3, componentY: 4, width: 32) {\n              base64Image\n              hash\n            }\n          }\n        }\n      }\n      slug\n      body\n    }\n  }\n`\n\nexport default PostTemplate\n\nPostTemplate.propTypes = {\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string,\n  author: PropTypes.string,\n  image: PropTypes.object,\n  type: PropTypes.string,\n  stack: PropTypes.array,\n  code: PropTypes.string,\n  live: PropTypes.string,\n}\n"],"names":["ProjectOverview","styled","ProjectSubtext","muiStyled","Typography","ProjectTitleGrid","Grid","data","deckDeckGoHighlightElement","mdx","frontmatter","title","date","image","type","stack","code","live","body","img","childImageSharp","gatsbyImageData","console","log","variant","gutterBottom","blurHash","alt","container","spacing","item","xs","sm","direction","map","s","href","MDXProvider","components","MDXProviderComponents","MDXRenderer"],"sourceRoot":""}